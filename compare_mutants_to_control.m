% This script loads feature summaries generated by Tierpsy and uses the
% data to compare two mutant strains to the control.  It does PCA to
% visualise the differences then does tests feature-by-feature to identify
% those that are significantly different between the mutants and the wild
% type after controlling for multiple comparisons.

% set parameters
nanThresh = 0.8; % drop features if the fraction of NaNs > nanThresh
strainsToAnalyse = {'N2'; 'unc-3 (n3435)'; 'lin-39 (n1760)'};
testType = 't-test'; % choose statistical test, 't-test' or 'ranksum'


% -------------------------------------------------------------------------
% Import data, combine with metadata, select feature subset
% -------------------------------------------------------------------------

% load the feature matrix, corresponding filenames, and metadata
tierpsyFeatureTable = readtable('./sample-data/features_summary_tierpsy_plate_20190416_173610.csv', 'Delimiter', ',');
tierpsyFileTable = readtable('./sample-data/filenames_summary_tierpsy_plate_20190416_173610.csv', 'Delimiter', ',');
metadataTable = readtable('./sample-data/metadata.xlsx');

% join the Tierpsy tables to match filenames with file_id. Required in case 
% features were not extracted for any files.
combinedTierpsyTable = outerjoin(tierpsyFileTable, tierpsyFeatureTable, ...
    'MergeKeys', true);

% get just the filenames from the full path in the tables
[~, fileNamesMetadata] = cellfun(@fileparts, metadataTable.filename, 'UniformOutput', false);
metadataTable.filename = fileNamesMetadata;
[~, fileNamesTierpsy] = cellfun(@fileparts, combinedTierpsyTable.file_name, 'UniformOutput', false);
combinedTierpsyTable.file_name = strrep(fileNamesTierpsy, '_featuresN', '');

% rename Tierpsy output to match metadata output
combinedTierpsyTable.Properties.VariableNames{'file_name'} = 'filename';

% finally, join tables to get strain names for each set of features
featureTable = outerjoin(metadataTable, combinedTierpsyTable, ...
    'MergeKeys', true);

% get worm strain names
wormNames = featureTable.strain;
uniqueNames = unique(wormNames);

% load the set of 256 features selected using basexd on classification
% accuracy on a set of mutant strains
filename256_features = ['/Users/abrown/Andre/projects/' ...
    '2018-tierpsy-features/' ...
    'top256_tierpsy_no_blob_no_eigen_only_abs_no_norm.csv'];
top256_all = readtable(filename256_features);
top256 = top256_all.Var2(2:end); % take just one set of 256, drop header

% shorten variable names (done in Excel for imported feature table)
featNames = strrep(top256, 'relative', 'rel');
featNames = strrep(featNames, 'velocity', 'vel');
featNames = strrep(featNames, 'angular', 'ang');


% -------------------------------------------------------------------------
% Pre-process data (impute NaNs, normalise)
% -------------------------------------------------------------------------

% advantage of indexing by feature name in tables is outweighed by
% complication of most function calls so proceed with feature matrix,
% wormNames, and feature indices
featMat = featureTable{:, featNames};

% impute nan values
featMeans = nanmean(featMat);
dropInds = false(size(featMat, 2), 1);
for ii = 1:size(featMat, 2)
    nanInds = isnan(featMat(:, ii));
    
    % if there are too many NaN values, drop the feature
    if sum(nanInds)/length(nanInds) > nanThresh
        dropInds(ii) = true;
    else
        % impute NaN values to global mean
        featMat(nanInds, ii) = featMeans(ii);
    end
end

% drop features with too many NaN values
featMat(:, dropInds) = [];
featNames(dropInds) = [];

% z-normalise feature matrix
featMatNorm = normalize(featMat);

% get indices of strains to analyse
inds = ismember(wormNames, strainsToAnalyse);


% -------------------------------------------------------------------------
% Visualise strain differences using clustering and PCA
% -------------------------------------------------------------------------

% make a heatmap to check inter vs. intra strain phenotypic differences
clg = clustergram(featMatNorm(inds, :), 'RowLabels', wormNames(inds), ...
    'ColumnLabels', featNames, 'Linkage', 'complete');
cmap = cbrewer('div', 'RdBu', 50); % RdYlBu
colormap(cmap(end:-1:1, :))
set(clg, 'Colormap', cmap(end:-1:1, :)) % 'DisplayRange', 2

% plot data along first two principal components
[coeff, score] = pca(featMatNorm(inds, :));

figure
gscatter(score(:, 1), score(:, 2), wormNames(inds))


% -------------------------------------------------------------------------
% Find significantly different features
% -------------------------------------------------------------------------

% compare a set of test strains to N2 for each feature
testNames = {'unc-3 (n3435)'; 'lin-39 (n1760)'};
pValMat = NaN(numel(testNames), size(featMat, 2));
N2Inds = find(ismember(wormNames, 'N2'));

% loop over unique strains
for ii = 1:numel(testNames)
    
    % get the indices of the current strain
    currentNameInds = find(ismember(wormNames, testNames{ii}));    
    
    if strcmp(testType, 't-test')
        % use t-test to compare strains with control
        [~, pValVec] = ...
            ttest2(featMat(N2Inds, :), featMat(currentNameInds, :));
        pValMat(ii, :) = pValVec;
        
    elseif strcmp(testType, 'ranksum')
        % loop over features
        for jj = 1:size(featMat, 2)
            disp([ii/numel(testNames), jj/size(featMat, 2)])
            
            pVal = ...
                ranksum(featMat(N2Inds, jj), featMat(currentNameInds, jj));
            pValMat(ii, jj) = pVal;
        end
    end
end

% correct for multiple comparisons
[~, pCrit, bhFDR] = fdr_bh(pValMat, 0.05 , 'dep');

% get the features with significant differences for each comparison set
hitInds = any(pValMat < pCrit);


% -------------------------------------------------------------------------
% Export boxplots showing all significant differences
% -------------------------------------------------------------------------

for ii = 1:size(featMat, 2)
    if ~hitInds(ii)
        continue
    end
    
    % check for setting related to visibility to increase speed
    figure('Visible', 'off')
    CategoricalScatterplot(featMat(inds, ii), wormNames(inds), ...
        'GroupOrder', vertcat('N2', testNames))
    
    ylabel(strrep(featNames(ii), '_', ' '))
    
    % add p-values of comparisons to plot title
    title(['p = ' num2str(pValMat(:, ii)', 2)])
    
    xlim([0.5, 3.5])
    
    set(gca, 'FontSize', 14, 'XTickLabelRotation', 45)
    set(gca, 'PlotBoxAspectRatio', [0.6, 1, 1])
    saveas(gcf, ['./hit-plots/feature-plot-' ...
        num2str(ii) '.png']) % , 'epsc'
    close
end




% make a matrix of mean values for each strain for all features
groupMeanMat = NaN(numel(uniqueNames), size(featMat, 2));
for ii = 1:size(featMat, 2)
    groupMeanMat(:, ii) = grpstats(featMat(:, ii), wormNames);
end

